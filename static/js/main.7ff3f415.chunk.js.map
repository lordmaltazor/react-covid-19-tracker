{"version":3,"sources":["Card.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Card","title","className","Header","text","App","useState","cases","setCases","deaths","setDeaths","recovered","setRecovered","search","setSearch","query","setQuery","errorMessage","setErrorMessage","useEffect","fetchData","a","requestOptions","method","redirect","fetch","response","json","data","commafy","Global","TotalConfirmed","TotalDeaths","TotalRecovered","foundCountry","i","Countries","length","toLocaleLowerCase","Country","toLowerCase","number","string","toString","split","replace","join","splitStr","charAt","toUpperCase","substring","titleCase","onSubmit","e","preventDefault","target","reset","focus","type","placeholder","onChange","value","style","visibility","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ff3f415.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({title}) {\r\n    return (\r\n        <div className=\"card\">\r\n            <h1 className=\"title\">{title}</h1>\r\n        </div>       \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nfunction Header({text}) {\r\n    if (text == '')\r\n    {\r\n        return (\r\n            <h1 className=\"header\">Covid-19 Cases, deaths and recoveries World-Wide</h1>\r\n        );\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <h1 className=\"header\">Covid-19 Cases, deaths and recoveries in {text}</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Card from './Card';\nimport Header from './Header';\n\nfunction App() {  \n  const [cases, setCases] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n\n  const [errorMessage, setErrorMessage] = useState('empty'); \n\n  useEffect(() => {\n    fetchData();\n  }, []) \n\n  useEffect(() => {\n    fetchData();\n  }, [query])\n\n  const fetchData = async () => { \n    //console.log(\"Query: \" + query);\n    \n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow'\n    };\n    \n    const response = await fetch(\"https://api.covid19api.com/summary\", requestOptions);\n    const data = await response.json();\n\n    // If the seach is empty then we search world wide, if the user has typed in a country we fetch data from that country\n    if (query === '') {      \n\n      //console.log(data);\n\n      setCases(commafy(data.Global.TotalConfirmed));\n      setDeaths(commafy(data.Global.TotalDeaths));\n      setRecovered(commafy(data.Global.TotalRecovered));\n\n      setErrorMessage('empty');\n    }\n    else {\n      //console.log(data);\n\n      let foundCountry = false;\n\n      //console.log(\"Number of countries: \" + data.Countries.length);\n\n      for (let i = 0; i < data.Countries.length; i++)\n      {\n        if (query.toLocaleLowerCase() === data.Countries[i].Country.toLowerCase())\n        {\n          setCases(commafy(data.Countries[i].TotalConfirmed));\n          setDeaths(commafy(data.Countries[i].TotalDeaths));\n          setRecovered(commafy(data.Countries[i].TotalRecovered));\n\n          foundCountry = true;\n\n          setErrorMessage('empty');\n\n          return;\n        }\n      }\n\n      if (foundCountry === false)\n      {\n        setErrorMessage(`Sorry, didn't find a country with name '${query}'`);\n      }\n    }\n  }\n\n  function commafy(number) {\n    let string = number.toString().split('.');\n\n    if (string[0].length >= 5) {\n        string[0] = string[0].replace(/(\\d)(?=(\\d{3})+$)/g, '$1,');\n    }\n\n    if (string[1] && string[1].length >= 5) {\n        string[1] = string[1].replace(/(\\d{3})/g, '$1 ');\n    }\n    return string.join(\".\");\n  }\n\n  function titleCase(string) {\n    let splitStr = string.toLowerCase().split(' ');\n\n    for (let i = 0; i < splitStr.length; i++) {\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);     \n    }\n\n    return splitStr.join(' '); \n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const submitForm = e => { \n    e.preventDefault();\n\n    setQuery(search);\n\n    fetchData();\n\n    e.target.reset();\n\n    e.target.focus(); \n  }\n\n  return (\n    <div className=\"app\">\n      <Header text={titleCase(query)}/>\n\n      <form className=\"search-form\" onSubmit={submitForm}>\n        <input className=\"search-bar\" type=\"text\" placeholder=\"Search by country\" onChange={updateSearch}/>\n        <button className=\"search-button\">Search</button>\n      </form>\n\n      <p className=\"error-message\" style={errorMessage === 'empty' ? {visibility:\"hidden\"} : {visibility:\"visible\"}}>{errorMessage}</p> \n\n      <div className=\"cards\">\n        <Card title={`Cases: ${cases}`}/>\n        <Card title={`Deaths: ${deaths}`}/>\n        <Card title={`Recovered: ${recovered}`}/>\n      </div>\n\n      <footer>\n        <p>Made by <a href=\"https://twitter.com/lordmaltazor\" target=\"_blank\">@lordmaltazor </a> | Data is fetched from <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\">Johns Hopkins CSSE</a> using <a href=\"https://covid19api.com/\" target=\"_blank\">covid19api.com</a></p>\n      </footer>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}